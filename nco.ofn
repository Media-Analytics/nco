Prefix(:=<http://data.open.ac.uk/ontology/newsclassification#>)
Prefix(dul:=<http://www.ontologydesignpatterns.org/ont/dul/d0.owl#>)
Prefix(nao:=<http://purl.org/news/angles/>)
Prefix(nco:=<http://data.open.ac.uk/ontology/newsclassification#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(iptc:=<http://cv.iptc.org/newscodes/mediatopic/>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(time:=<http://www.w3.org/2006/time#>)
Prefix(swrla:=<http://swrl.stanford.edu/ontologies/3.3/swrla.owl#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)
Prefix(terms:=<http://purl.org/dc/terms/>)


Ontology(<http://data.open.ac.uk/ontology/newsclassification>
<http://data.open.ac.uk/ontology/newsclassification/1.4.2>
Import(<http://www.w3.org/2004/02/skos/core>)
Import(<http://www.w3.org/2006/time#2016>)
Annotation(terms:title "News Classification Ontology (NCO)"@en)
Annotation(rdfs:comment "The News Classification Ontology (NCO) v1.4.2. It defines the concepts needed to discuss news coverage.  These concepts include Entities, Events, Situations, Categorical Topics, Claims and Viewpoints.

Preferred prefix is `nco: <http://data.open.ac.uk/ontology/newsclassification#>`."@en)
Annotation(rdfs:comment "We import SKOS, TimeOntology"@en)
Annotation(rdfs:label "News Classification Ontology (NCO)"@en)

Declaration(Class(nco:Agent))
Declaration(Class(nco:AgentComponent))
Declaration(Class(nco:AgentRole))
Declaration(Class(nco:Aspect))
Declaration(Class(nco:CategoricalTopic))
Declaration(Class(nco:Claim))
Declaration(Class(nco:Collection))
Declaration(Class(nco:CollectionOfEvents))
Declaration(Class(nco:Description))
Declaration(Class(nco:Entity))
Declaration(Class(nco:Event))
Declaration(Class(nco:EventOrSituation))
Declaration(Class(nco:Justification))
Declaration(Class(nco:Location))
Declaration(Class(nco:NegativeEvent))
Declaration(Class(nco:NewsItem))
Declaration(Class(nco:OmissionEvent))
Declaration(Class(nco:Predicate))
Declaration(Class(nco:PredictionEvent))
Declaration(Class(nco:Situation))
Declaration(Class(nco:Statement))
Declaration(Class(nco:Topic))
Declaration(Class(nco:UnifyingFactor))
Declaration(Class(nco:Viewpoint))
Declaration(Class(rdf:List))
Declaration(Class(owl:Annotation))
Declaration(ObjectProperty(nco:characterisedBy))
Declaration(ObjectProperty(nco:characterises))
Declaration(ObjectProperty(nco:claimInNewsItem))
Declaration(ObjectProperty(nco:concernsTopic))
Declaration(ObjectProperty(nco:dependsOn))
Declaration(ObjectProperty(nco:eventDependsOn))
Declaration(ObjectProperty(nco:hasAgent))
Declaration(ObjectProperty(nco:hasAgentComponent))
Declaration(ObjectProperty(nco:hasAgentRole))
Declaration(ObjectProperty(nco:hasAspect))
Declaration(ObjectProperty(nco:hasClaim))
Declaration(ObjectProperty(nco:hasElement))
Declaration(ObjectProperty(nco:hasJustification))
Declaration(ObjectProperty(nco:hasLocation))
Declaration(ObjectProperty(nco:hasOmittedEvent))
Declaration(ObjectProperty(nco:hasPrediction))
Declaration(ObjectProperty(nco:hasSubEvent))
Declaration(ObjectProperty(nco:hasSubTopic))
Declaration(ObjectProperty(nco:hasTime))
Declaration(ObjectProperty(nco:hasTopic))
Declaration(ObjectProperty(nco:hasUnifyingFactor))
Declaration(ObjectProperty(nco:hasViewpoint))
Declaration(ObjectProperty(nco:inNewsItem))
Declaration(ObjectProperty(nco:includesClaim))
Declaration(ObjectProperty(nco:isAspectOf))
Declaration(ObjectProperty(nco:isClaimOf))
Declaration(ObjectProperty(nco:isElementOf))
Declaration(ObjectProperty(nco:isJustificationOf))
Declaration(ObjectProperty(nco:isOmittedEventOf))
Declaration(ObjectProperty(nco:isTimeOf))
Declaration(ObjectProperty(nco:isUnifyingFactorOf))
Declaration(ObjectProperty(nco:object))
Declaration(ObjectProperty(nco:preconditionFor))
Declaration(ObjectProperty(nco:preconditionForEvent))
Declaration(ObjectProperty(nco:predicate))
Declaration(ObjectProperty(nco:satisfiesUf))
Declaration(ObjectProperty(nco:subEventOf))
Declaration(ObjectProperty(nco:subTopicOf))
Declaration(ObjectProperty(nco:subject))
Declaration(ObjectProperty(nco:topicInNewsItem))
Declaration(ObjectProperty(nco:topicRole))
Declaration(ObjectProperty(nco:topicRoleOf))
Declaration(ObjectProperty(nco:ufSatisfiedBy))
Declaration(ObjectProperty(nco:viewpointInNewsItem))
Declaration(ObjectProperty(owl:annotatedProperty))
Declaration(ObjectProperty(owl:annotatedSource))
Declaration(ObjectProperty(owl:annotatedTarget))
Declaration(NamedIndividual(nco:hasTopic))
Declaration(NamedIndividual(<http://www.opengis.net/def/uom/ISO-8601/0/Gregorian>))
Declaration(NamedIndividual(time:Friday))
Declaration(NamedIndividual(time:Monday))
Declaration(NamedIndividual(time:Saturday))
Declaration(NamedIndividual(time:Sunday))
Declaration(NamedIndividual(time:Thursday))
Declaration(NamedIndividual(time:Tuesday))
Declaration(NamedIndividual(time:Wednesday))
Declaration(NamedIndividual(time:unitDay))
Declaration(NamedIndividual(time:unitHour))
Declaration(NamedIndividual(time:unitMinute))
Declaration(NamedIndividual(time:unitMonth))
Declaration(NamedIndividual(time:unitSecond))
Declaration(NamedIndividual(time:unitWeek))
Declaration(NamedIndividual(time:unitYear))
Declaration(AnnotationProperty(terms:contributor))
Declaration(AnnotationProperty(terms:created))
Declaration(AnnotationProperty(terms:creator))
Declaration(AnnotationProperty(terms:description))
Declaration(AnnotationProperty(terms:isVersionOf))
Declaration(AnnotationProperty(terms:license))
Declaration(AnnotationProperty(terms:modified))
Declaration(AnnotationProperty(terms:rights))
Declaration(AnnotationProperty(terms:title))
Declaration(AnnotationProperty(swrla:isRuleEnabled))
Declaration(AnnotationProperty(xsd:pattern))
Declaration(Datatype(xsd:date))
Declaration(Datatype(xsd:duration))
Declaration(Datatype(xsd:gDay))
Declaration(Datatype(xsd:gMonth))
Declaration(Datatype(xsd:gYear))
Declaration(Datatype(xsd:gYearMonth))

############################
#   Object Properties
############################

# Object Property: nco:characterisedBy (characterised by)

AnnotationAssertion(rdfs:label nco:characterisedBy "characterised by"@en)
InverseObjectProperties(nco:characterisedBy nco:characterises)

# Object Property: nco:characterises (characterises)

AnnotationAssertion(rdfs:comment nco:characterises "This is the main relation linking descriptions to situations. A description provides an interpretation of a situation."@en)
AnnotationAssertion(rdfs:label nco:characterises "characterises"@en)
ObjectPropertyDomain(nco:characterises nco:Description)
ObjectPropertyRange(nco:characterises nco:Situation)

# Object Property: nco:claimInNewsItem (nco:claimInNewsItem)

SubObjectPropertyOf(nco:claimInNewsItem nco:inNewsItem)
InverseObjectProperties(nco:claimInNewsItem nco:hasClaim)
ObjectPropertyDomain(nco:claimInNewsItem nco:Claim)
ObjectPropertyRange(nco:claimInNewsItem nco:NewsItem)

# Object Property: nco:concernsTopic (concerns topic)

AnnotationAssertion(rdfs:comment nco:concernsTopic "A claim is something that concerns a topic.  The property concernsTopic is used to express this relation")
AnnotationAssertion(rdfs:label nco:concernsTopic "concerns topic"@en)
ObjectPropertyDomain(nco:concernsTopic nco:Claim)
ObjectPropertyRange(nco:concernsTopic nco:Topic)

# Object Property: nco:dependsOn (depends on)

AnnotationAssertion(rdfs:label nco:dependsOn "depends on"@en)
InverseObjectProperties(nco:dependsOn nco:preconditionFor)
TransitiveObjectProperty(nco:dependsOn)
ObjectPropertyDomain(nco:dependsOn nco:EventOrSituation)
ObjectPropertyRange(nco:dependsOn nco:EventOrSituation)

# Object Property: nco:eventDependsOn (event depends on)

AnnotationAssertion(rdfs:comment nco:eventDependsOn "range is {Event OR Situation}"@en)
AnnotationAssertion(rdfs:label nco:eventDependsOn "event depends on"@en)
SubObjectPropertyOf(nco:eventDependsOn nco:dependsOn)
InverseObjectProperties(nco:eventDependsOn nco:preconditionForEvent)
ObjectPropertyDomain(nco:eventDependsOn nco:Event)
ObjectPropertyRange(nco:eventDependsOn nco:EventOrSituation)

# Object Property: nco:hasAgent (has agent)

AnnotationAssertion(rdfs:label nco:hasAgent "has agent"@en)
ObjectPropertyDomain(nco:hasAgent ObjectUnionOf(nco:AgentComponent nco:Claim))
ObjectPropertyRange(nco:hasAgent nco:Agent)

# Object Property: nco:hasAgentComponent (has agent component)

AnnotationAssertion(rdfs:label nco:hasAgentComponent "has agent component"@en)
ObjectPropertyDomain(nco:hasAgentComponent nco:Event)
ObjectPropertyRange(nco:hasAgentComponent nco:AgentComponent)

# Object Property: nco:hasAgentRole (has actor role)

AnnotationAssertion(rdfs:label nco:hasAgentRole "has actor role"@en)
ObjectPropertyDomain(nco:hasAgentRole nco:AgentComponent)
ObjectPropertyRange(nco:hasAgentRole nco:Agent)

# Object Property: nco:hasAspect (has aspect)

AnnotationAssertion(rdfs:comment nco:hasAspect "Connects an entity to its aspects - e.g., the financial status of an individual"@en)
AnnotationAssertion(rdfs:label nco:hasAspect "has aspect"@en)
InverseObjectProperties(nco:hasAspect nco:isAspectOf)
ObjectPropertyDomain(nco:hasAspect nco:Entity)
ObjectPropertyRange(nco:hasAspect nco:Aspect)

# Object Property: nco:hasClaim (has claim)

AnnotationAssertion(rdfs:comment nco:hasClaim "Captures the relation between a news item and a claim expressed by an agent, which is reported in the news item in question"@en)
AnnotationAssertion(rdfs:label nco:hasClaim "has claim"@en)
ObjectPropertyDomain(nco:hasClaim nco:NewsItem)
ObjectPropertyRange(nco:hasClaim nco:Claim)

# Object Property: nco:hasElement (has element)

AnnotationAssertion(rdfs:label nco:hasElement "has element"@en)
InverseObjectProperties(nco:hasElement nco:isElementOf)
ObjectPropertyDomain(nco:hasElement nco:Collection)
ObjectPropertyRange(nco:hasElement owl:Thing)

# Object Property: nco:hasJustification (has justification)

AnnotationAssertion(rdfs:label nco:hasJustification "has justification"@en)
InverseObjectProperties(nco:hasJustification nco:isJustificationOf)
ObjectPropertyDomain(nco:hasJustification nco:Claim)
ObjectPropertyRange(nco:hasJustification nco:Justification)

# Object Property: nco:hasLocation (has location)

AnnotationAssertion(rdfs:label nco:hasLocation "has location"@en)
ObjectPropertyDomain(nco:hasLocation nco:Event)
ObjectPropertyRange(nco:hasLocation nco:Location)

# Object Property: nco:hasOmittedEvent (has omitted event)

AnnotationAssertion(rdfs:comment nco:hasOmittedEvent "captures the relation between an OmissionEvent and the event that has not been carried out - e.g., a soldier's failure to carry out an order"@en)
AnnotationAssertion(rdfs:label nco:hasOmittedEvent "has omitted event"@en)
InverseObjectProperties(nco:hasOmittedEvent nco:isOmittedEventOf)
ObjectPropertyDomain(nco:hasOmittedEvent nco:OmissionEvent)
ObjectPropertyRange(nco:hasOmittedEvent nco:Event)

# Object Property: nco:hasPrediction (nco:hasPrediction)

AnnotationAssertion(rdfs:comment nco:hasPrediction "captures the relation between a PredictionEvent and the event that has been predicted - forecasting an eruption"@en)
ObjectPropertyDomain(nco:hasPrediction nco:PredictionEvent)
ObjectPropertyRange(nco:hasPrediction nco:EventOrSituation)

# Object Property: nco:hasSubEvent (has subevent)

AnnotationAssertion(rdfs:label nco:hasSubEvent "has subevent"@en)
SubObjectPropertyOf(nco:hasSubEvent nco:preconditionForEvent)
InverseObjectProperties(nco:hasSubEvent nco:subEventOf)
TransitiveObjectProperty(nco:hasSubEvent)
ObjectPropertyDomain(nco:hasSubEvent nco:Event)
ObjectPropertyRange(nco:hasSubEvent nco:Event)

# Object Property: nco:hasSubTopic (has subtopic)

AnnotationAssertion(rdfs:comment nco:hasSubTopic "This property captures hierarchical relations between topics – e.g., as expressed in the IPTC NewsCodes taxonomy"@en)
AnnotationAssertion(rdfs:label nco:hasSubTopic "has subtopic"@en)
SubObjectPropertyOf(nco:hasSubTopic skos:narrowerTransitive)
InverseObjectProperties(nco:hasSubTopic nco:subTopicOf)
TransitiveObjectProperty(nco:hasSubTopic)
ObjectPropertyDomain(nco:hasSubTopic nco:Topic)
ObjectPropertyRange(nco:hasSubTopic nco:Topic)

# Object Property: nco:hasTime (has time)

AnnotationAssertion(rdfs:label nco:hasTime "has time"@en)
SubObjectPropertyOf(nco:hasTime time:hasTime)
InverseObjectProperties(nco:hasTime nco:isTimeOf)
ObjectPropertyDomain(nco:hasTime nco:EventOrSituation)
ObjectPropertyRange(nco:hasTime time:TemporalEntity)

# Object Property: nco:hasTopic (nco:hasTopic)

AnnotationAssertion(rdfs:comment nco:hasTopic "captures the relation between a news item and a topic, which is the focus of the news item in question"@en)
InverseObjectProperties(nco:hasTopic nco:topicInNewsItem)
ObjectPropertyDomain(nco:hasTopic nco:NewsItem)
ObjectPropertyRange(nco:hasTopic nco:Topic)

# Object Property: nco:hasUnifyingFactor (has unifying factor)

AnnotationAssertion(rdfs:comment nco:hasUnifyingFactor "Relates a collection to the associated unifying factor"@en)
AnnotationAssertion(rdfs:label nco:hasUnifyingFactor "has unifying factor"@en)
InverseObjectProperties(nco:hasUnifyingFactor nco:isUnifyingFactorOf)
ObjectPropertyDomain(nco:hasUnifyingFactor nco:Collection)
ObjectPropertyRange(nco:hasUnifyingFactor nco:UnifyingFactor)

# Object Property: nco:hasViewpoint (nco:hasViewpoint)

AnnotationAssertion(rdfs:comment nco:hasViewpoint "Relates a news item to a viewpoint, say ?v, expressed in the news item in question. Normally this relation is not asserted but inferred on the basis of a claim, say ?c, appearing in the news item, where ?c is an element of ?v"@en)
InverseObjectProperties(nco:hasViewpoint nco:viewpointInNewsItem)
ObjectPropertyDomain(nco:hasViewpoint nco:NewsItem)
ObjectPropertyRange(nco:hasViewpoint nco:Viewpoint)

# Object Property: nco:inNewsItem (in news item)

AnnotationAssertion(rdfs:label nco:inNewsItem "in news item"@en)

# Object Property: nco:includesClaim (nco:includesClaim)

AnnotationAssertion(rdfs:comment nco:includesClaim "A specialization of hasElement that is used to relate a claim to the viewpoint that includes it"@en)
SubObjectPropertyOf(nco:includesClaim nco:hasElement)
InverseObjectProperties(nco:includesClaim nco:isClaimOf)
ObjectPropertyDomain(nco:includesClaim nco:Viewpoint)
ObjectPropertyRange(nco:includesClaim nco:Claim)

# Object Property: nco:isAspectOf (is aspect of)

AnnotationAssertion(rdfs:label nco:isAspectOf "is aspect of"@en)
ObjectPropertyDomain(nco:isAspectOf nco:Aspect)
ObjectPropertyRange(nco:isAspectOf owl:Thing)

# Object Property: nco:isClaimOf (is claim of)

AnnotationAssertion(rdfs:label nco:isClaimOf "is claim of"@en)
SubObjectPropertyOf(nco:isClaimOf nco:isElementOf)

# Object Property: nco:isElementOf (is element of)

AnnotationAssertion(rdfs:label nco:isElementOf "is element of"@en)
ObjectPropertyDomain(nco:isElementOf owl:Thing)
ObjectPropertyRange(nco:isElementOf nco:Collection)

# Object Property: nco:isUnifyingFactorOf (is unifying factor of)

AnnotationAssertion(rdfs:label nco:isUnifyingFactorOf "is unifying factor of"@en)

# Object Property: nco:object (nco:object)

ObjectPropertyDomain(nco:object nco:Statement)
ObjectPropertyRange(nco:object owl:Thing)

# Object Property: nco:preconditionFor (precondition for)

AnnotationAssertion(rdfs:label nco:preconditionFor "precondition for"@en)
TransitiveObjectProperty(nco:preconditionFor)
ObjectPropertyDomain(nco:preconditionFor nco:EventOrSituation)
ObjectPropertyRange(nco:preconditionFor nco:EventOrSituation)

# Object Property: nco:preconditionForEvent (precondition for event)

AnnotationAssertion(rdfs:label nco:preconditionForEvent "precondition for event"@en)
SubObjectPropertyOf(nco:preconditionForEvent nco:preconditionFor)
ObjectPropertyDomain(nco:preconditionForEvent nco:EventOrSituation)
ObjectPropertyRange(nco:preconditionForEvent nco:Event)

# Object Property: nco:predicate (nco:predicate)

ObjectPropertyDomain(nco:predicate nco:Statement)
ObjectPropertyRange(nco:predicate nco:Predicate)

# Object Property: nco:satisfiesUf (satisfies)

AnnotationAssertion(rdfs:comment nco:satisfiesUf "An element can be part of a collection if and only if it satisfies the relevant unifying factor. This relation captures the relation between the element in a collection and the relevant unifying factor.  In general, we expect instances of class Collection to specify this relation in domain-dependent ways"@en)
AnnotationAssertion(rdfs:label nco:satisfiesUf "satisfies"@en)
InverseObjectProperties(nco:satisfiesUf nco:ufSatisfiedBy)
ObjectPropertyDomain(nco:satisfiesUf ObjectSomeValuesFrom(nco:isElementOf nco:Collection))
ObjectPropertyRange(nco:satisfiesUf nco:UnifyingFactor)

# Object Property: nco:subEventOf (is subevent of)

AnnotationAssertion(rdfs:comment nco:subEventOf "Captures hierarchical relations between events - e.g., the event \"verdict\" in a trial is a subEventOf of a broader \"trial\" event"@en)
AnnotationAssertion(rdfs:label nco:subEventOf "is subevent of"@en)
SubObjectPropertyOf(nco:subEventOf nco:eventDependsOn)
ObjectPropertyDomain(nco:subEventOf nco:Event)
ObjectPropertyRange(nco:subEventOf nco:Event)

# Object Property: nco:subTopicOf (subtopic of)

AnnotationAssertion(rdfs:label nco:subTopicOf "subtopic of"@en)
SubObjectPropertyOf(nco:subTopicOf skos:broaderTransitive)
TransitiveObjectProperty(nco:subTopicOf)
ObjectPropertyDomain(nco:subTopicOf nco:Topic)
ObjectPropertyRange(nco:subTopicOf nco:Topic)

# Object Property: nco:subject (nco:subject)

ObjectPropertyDomain(nco:subject nco:Statement)
ObjectPropertyRange(nco:subject owl:Thing)

# Object Property: nco:topicInNewsItem (nco:topicInNewsItem)

SubObjectPropertyOf(nco:topicInNewsItem nco:inNewsItem)
ObjectPropertyDomain(nco:topicInNewsItem nco:Topic)
ObjectPropertyRange(nco:topicInNewsItem nco:NewsItem)

# Object Property: nco:topicRole (nco:topicRole)

AnnotationAssertion(rdfs:comment nco:topicRole "It is essential to distinguish an entity, e.g., the individual J.F. Kennedy, from the associated topic, e.g., T_J.F. Kennedy.  These are two different ontological objects with very different properties. For instance, while the time span of  J.F. Kennedy the person was 1917-1963,  the time span of the associated topic continued after his death.  More in general, this relation is needed every time an individual in our knowledge base, which is not ontologically a topic (e.g., a person, an event, a statement, etc.) plays the role of a topic in the model."@en)
InverseObjectProperties(nco:topicRole nco:topicRoleOf)
FunctionalObjectProperty(nco:topicRole)
InverseFunctionalObjectProperty(nco:topicRole)
ObjectPropertyDomain(nco:topicRole owl:Thing)
ObjectPropertyRange(nco:topicRole nco:Topic)

# Object Property: nco:topicRoleOf (is topic role of)

AnnotationAssertion(rdfs:comment nco:topicRoleOf "A given topic role is played by one and only thing."@en)
AnnotationAssertion(rdfs:label nco:topicRoleOf "is topic role of"@en)
FunctionalObjectProperty(nco:topicRoleOf)
InverseFunctionalObjectProperty(nco:topicRoleOf)
ObjectPropertyDomain(nco:topicRoleOf nco:Topic)
ObjectPropertyRange(nco:topicRoleOf owl:Thing)

# Object Property: nco:ufSatisfiedBy (satisfied by)

AnnotationAssertion(rdfs:label nco:ufSatisfiedBy "satisfied by"@en)

# Object Property: nco:viewpointInNewsItem (nco:viewpointInNewsItem)

SubObjectPropertyOf(nco:viewpointInNewsItem nco:inNewsItem)
ObjectPropertyDomain(nco:viewpointInNewsItem nco:Viewpoint)
ObjectPropertyRange(nco:viewpointInNewsItem nco:NewsItem)



############################
#   Classes
############################

# Class: nco:Agent (Agent)

AnnotationAssertion(rdfs:label nco:Agent "Agent"@en)
SubClassOf(nco:Agent nco:Entity)

# Class: nco:AgentComponent (Agent component)

AnnotationAssertion(rdfs:label nco:AgentComponent "Agent component"@en)
AnnotationAssertion(rdfs:seeAlso nco:AgentComponent "nao:AgentComponent")
SubClassOf(nco:AgentComponent ObjectAllValuesFrom(nco:hasAgent nco:Agent))
SubClassOf(nco:AgentComponent ObjectAllValuesFrom(nco:hasAgentRole nco:AgentRole))
SubClassOf(nco:AgentComponent ObjectMaxCardinality(1 nco:hasAgentRole nco:AgentRole))

# Class: nco:AgentRole (Agent role)

AnnotationAssertion(rdfs:label nco:AgentRole "Agent role"@en)

# Class: nco:Aspect (nco:Aspect)

AnnotationAssertion(rdfs:comment nco:Aspect "The notion of entity aspect discussed here is related to the second level of agenda setting theory, which deals with the salience of the attributes of the entities that are the focus of attention in the media (McCombs et al., 2014)"@en)

# Class: nco:CategoricalTopic (nco:CategoricalTopic)

AnnotationAssertion(rdfs:comment nco:CategoricalTopic "A Categorical Topic is a broad topic for discussion and journalistic analysis that tends to be generally relevant and newsworthy. Such topics include social, economic and political issues, such as crime, poverty, taxation, finances, economic, foreign and defence policies, immigration, party politics, and many others. Broad taxonomies for journalism, such as the IPTC Media Topic NewsCodes, tend to focus on categorical topics"@en)
SubClassOf(nco:CategoricalTopic nco:Topic)

# Class: nco:Claim (Claim)

AnnotationAssertion(rdfs:comment nco:Claim "A claim is characterised in this ontology as a reified statement"@en)
AnnotationAssertion(rdfs:label nco:Claim "Claim"@en)
SubClassOf(nco:Claim nco:Statement)
SubClassOf(nco:Claim ObjectSomeValuesFrom(nco:claimInNewsItem nco:NewsItem))
SubClassOf(nco:Claim ObjectSomeValuesFrom(nco:concernsTopic nco:Topic))
SubClassOf(nco:Claim ObjectSomeValuesFrom(nco:hasAgent nco:Agent))
SubClassOf(nco:Claim ObjectAllValuesFrom(nco:claimInNewsItem nco:NewsItem))
SubClassOf(nco:Claim ObjectAllValuesFrom(nco:concernsTopic nco:Topic))
SubClassOf(nco:Claim ObjectAllValuesFrom(nco:hasAgent nco:Agent))
SubClassOf(nco:Claim ObjectAllValuesFrom(nco:hasJustification nco:Justification))

# Class: nco:Collection (Collection)

AnnotationAssertion(rdfs:comment nco:Collection "Membership of a Collection is predicated on meeting the conditions associated with the associated unifying factor (Carriero et al., 2021)."@en)
AnnotationAssertion(rdfs:label nco:Collection "Collection"@en)
AnnotationAssertion(rdfs:seeAlso nco:Collection "Class Collection in Dolce D0, dul:Collection"@en)
SubClassOf(nco:Collection ObjectAllValuesFrom(nco:hasUnifyingFactor nco:UnifyingFactor))
SubClassOf(nco:Collection ObjectMaxCardinality(1 nco:hasUnifyingFactor nco:UnifyingFactor))
DisjointUnion(nco:Collection nco:CollectionOfEvents nco:Description nco:Situation nco:Viewpoint)

# Class: nco:CollectionOfEvents (Collection of events)

AnnotationAssertion(rdfs:label nco:CollectionOfEvents "Collection of events"@en)
SubClassOf(nco:CollectionOfEvents nco:Collection)
SubClassOf(nco:CollectionOfEvents ObjectAllValuesFrom(nco:hasElement nco:Event))

# Class: nco:Description (Description)

AnnotationAssertion(rdfs:comment nco:Description "Like a Situation, a Description is also characterised as a Collection of Statements"@en)
AnnotationAssertion(rdfs:label nco:Description "Description"@en)
SubClassOf(nco:Description nco:Collection)
SubClassOf(nco:Description ObjectAllValuesFrom(nco:characterises nco:Situation))
SubClassOf(nco:Description ObjectAllValuesFrom(nco:hasElement nco:Statement))
SubClassOf(nco:Description ObjectMinCardinality(1 nco:characterises nco:Situation))
SubClassOf(nco:Description ObjectMinCardinality(1 nco:hasElement nco:Statement))

# Class: nco:Event (Event)

AnnotationAssertion(rdfs:comment nco:Event "The notion of Event in NCO is based on the one used by the News Angle Ontology (Motta et al., 2020), which is in turn based on the Simple Event Model (van Hage et al., 2011).  An event in this model is characterised in terms of time, location and the actors involved in the event.  The relation between events and actors is mediated by actor components, which specify the role played by the actor in question in the event."@en)
AnnotationAssertion(rdfs:label nco:Event "Event"@en)
AnnotationAssertion(rdfs:seeAlso nco:Event "nao:Event")
SubClassOf(nco:Event nco:EventOrSituation)
SubClassOf(nco:Event ObjectAllValuesFrom(nco:hasAgent nco:AgentComponent))
SubClassOf(nco:Event ObjectAllValuesFrom(nco:hasLocation nco:Location))

# Class: nco:EventOrSituation (nco:EventOrSituation)

AnnotationAssertion(rdfs:comment nco:EventOrSituation "A pragmatic class to avoid having to refer to the union of Event and Situation in several expressions"@en)
EquivalentClasses(nco:EventOrSituation ObjectUnionOf(nco:Event nco:Situation))

# Class: nco:Justification (nco:Justification)

AnnotationAssertion(rdfs:comment nco:Justification "Class Justification refers to the justification for a claim.  Because this ontology focuses on news classification rather than argumentation, the definition here is simply a placeholder and is not further elaborated"@en)
SubClassOf(nco:Justification owl:Thing)

# Class: nco:Location (Location)

AnnotationAssertion(rdfs:label nco:Location "Location"@en)
AnnotationAssertion(rdfs:seeAlso nco:Location "dul:Location")

# Class: nco:NegativeEvent (Negative event)

AnnotationAssertion(rdfs:label nco:NegativeEvent "Negative event"@en)
SubClassOf(nco:NegativeEvent nco:Event)

# Class: nco:NewsItem (News item)

AnnotationAssertion(rdfs:label nco:NewsItem "News item"@en)
SubClassOf(nco:NewsItem owl:Thing)

# Class: nco:OmissionEvent (Omission event)

AnnotationAssertion(rdfs:comment nco:OmissionEvent "An OmissionEvent is an event capturing an expression of agency realised by not carrying out an event that was expected of the agent in question – see Payton, J.D. (2018).  How to identify negative actions with positive events.  Australasian Journal of Philosophy, 96(1), pp. 87-101.

Following Payton, we impose the constraint that the time of the omitted event is the same as the one associated with the omission event. That is, 
OmissionEvent(?ev1) ^ :hasOmittedEvent(?ev1, ?ev2) ^ :hasTime(?ev1, ?t1) -> :hasTime(?ev2, ?t1)
This is expressed by  means of a property chain specialising property :hasTime"@en)
AnnotationAssertion(rdfs:label nco:OmissionEvent "Omission event"@en)
SubClassOf(nco:OmissionEvent ObjectIntersectionOf(nco:NegativeEvent ObjectAllValuesFrom(nco:hasOmittedEvent nco:Event) ObjectExactCardinality(1 nco:hasOmittedEvent nco:Event)))

# Class: nco:Predicate (nco:Predicate)

AnnotationAssertion(rdfs:comment nco:Predicate "This is a metaclass whose instances play the role of a predicate in reified triples.  It is needed because OWL does not allow object properties to be used directly as values in triples unless an individual with the same name has been defined"@en)

# Class: nco:PredictionEvent (Predicted event)

AnnotationAssertion(rdfs:comment nco:PredictionEvent "We impose the constraint that the time of the predicted event has to be after that associated with the prediction event. That is:

PredictionEvent(?ev1) & hasPrediction (?ev1 ?ev_or_sit) & :hasTime (?ev1 ?t1) & :hasTime (?ev_or_sit ?t2) --> time:intervalBefore (?t1 ?t2)

This constraint is expressed through a property chain specialising time:intervalBefore"@en)
AnnotationAssertion(rdfs:label nco:PredictionEvent "Predicted event"@en)
SubClassOf(nco:PredictionEvent nco:Event)
SubClassOf(nco:PredictionEvent ObjectAllValuesFrom(nco:hasPrediction nco:EventOrSituation))
SubClassOf(nco:PredictionEvent ObjectExactCardinality(1 nco:hasPrediction nco:EventOrSituation))

# Class: nco:Situation (Situation)

AnnotationAssertion(rdfs:comment nco:Situation "A Situation is a collection of statements")
AnnotationAssertion(rdfs:label nco:Situation "Situation"@en)
AnnotationAssertion(rdfs:seeAlso nco:Situation "dul:Situation"@en)
SubClassOf(nco:Situation nco:Collection)
SubClassOf(nco:Situation nco:EventOrSituation)
SubClassOf(nco:Situation ObjectAllValuesFrom(nco:characterisedBy nco:Description))
SubClassOf(nco:Situation ObjectAllValuesFrom(nco:hasElement nco:Statement))
SubClassOf(nco:Situation ObjectMinCardinality(1 nco:hasElement nco:Statement))

# Class: nco:Statement (Statement)

AnnotationAssertion(rdfs:comment nco:Statement "A member of this class is an individual that reifies a triple."@en)
AnnotationAssertion(rdfs:label nco:Statement "Statement"@en)

# Class: nco:Topic (Topic)

AnnotationAssertion(rdfs:comment nco:Topic "A Topic provides the main focus of a news item. A Topic can be an Entity, an Event (or a Collection of Events), a Viewpoint, a Situation or a Categorical Topic"@en)
AnnotationAssertion(rdfs:label nco:Topic "Topic"@en)
SubClassOf(nco:Topic skos:Concept)
SubClassOf(nco:Topic ObjectSomeValuesFrom(nco:topicRoleOf owl:Thing))
SubClassOf(nco:Topic ObjectExactCardinality(1 nco:topicRoleOf))

# Class: nco:UnifyingFactor (Unifying factor)

AnnotationAssertion(rdfs:label nco:UnifyingFactor "Unifying factor"@en)

# Class: nco:Viewpoint (Viewpoint)

AnnotationAssertion(rdfs:comment nco:Viewpoint "As pointed out in (Baden and Springer, 2017), when analysing the news discourse, we are interested in identifying viewpoints that “open up different perspectives” and “construct different meaning”. Hence, here we define a Viewpoint as a collection of claims that subscribe to the same perspective"@en)
AnnotationAssertion(rdfs:label nco:Viewpoint "Viewpoint"@en)
SubClassOf(nco:Viewpoint nco:Collection)
SubClassOf(nco:Viewpoint ObjectIntersectionOf(ObjectAllValuesFrom(nco:hasElement nco:Claim) ObjectMinCardinality(1 nco:hasElement nco:Claim)))


############################
#   Named Individuals
############################

# Individual: nco:hasTopic (nco:hasTopic)

ClassAssertion(nco:Predicate nco:hasTopic)


DisjointClasses(nco:Agent nco:Collection nco:Event nco:NewsItem nco:Statement nco:UnifyingFactor)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasClaim nco:isClaimOf) nco:hasViewpoint)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasTopic nco:subTopicOf) nco:hasTopic)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasTopic nco:topicRoleOf nco:isAspectOf nco:topicRole) nco:hasTopic)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasTopic nco:topicRoleOf nco:isClaimOf nco:topicRole) nco:hasTopic)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasTopic nco:topicRoleOf nco:object nco:topicRole) nco:hasTopic)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasTopic nco:topicRoleOf nco:predicate nco:topicRole) nco:hasTopic)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasTopic nco:topicRoleOf nco:subject nco:topicRole) nco:hasTopic)
SubObjectPropertyOf(ObjectPropertyChain(nco:hasUnifyingFactor nco:ufSatisfiedBy) nco:hasElement)
SubObjectPropertyOf(ObjectPropertyChain(nco:isElementOf nco:hasUnifyingFactor) nco:satisfiesUf)
SubObjectPropertyOf(ObjectPropertyChain(nco:isOmittedEventOf nco:hasTime) nco:hasTime)
SubObjectPropertyOf(ObjectPropertyChain(nco:isTimeOf nco:hasPrediction nco:hasTime) time:intervalBefore)
)