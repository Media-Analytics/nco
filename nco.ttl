@prefix : <http://data.open.ac.uk/ontology/news-classification#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix nco: <http://data.open.ac.uk/ontology/news-classification#> .
@base <http://data.open.ac.uk/ontology/news-classification#> .

<http://data.open.ac.uk/ontology/news-classification> rdf:type owl:Ontology ;
    skos:note """[Fixed] Categorial topics: nothing to do? Yes, we import IPTC and add axioms to use them as nco:Topic"""@en ;
    skos:note """[TODO] We import SKOS, TimeOntology, IPTC"""@en ;
    skos:note """[TODO] We align to DUL using SKOS"""@en
    .

###  Generated by the OWL API (version 4.5.25.2023-02-15T19:15:49Z) https://github.com/owlcs/owlapi


nco:NewsItem rdfs:subClassOf owl:Thing ;
	rdfs:label "News item"@en
	. 

nco:Topic rdfs:subClassOf skos:Concept ;
	rdfs:label "Topic"@en ;
    skos:note """TODO: ADD ForAll Topic Exists one and only one owl:Thing"""
	.

nco:Statement rdfs:subClassOf owl:Annotation ;
	rdfs:label "Statement"@en ;
	rdfs:comment ""@en ;
	skos:note "A statement is an annotation of a triple."@en
	.

nco:Event a owl:Class .

nco:Collection rdfs:subClassOf dul:Collection .

nco:CollectionOfEvents rdfs:subClassOf nco:Collection ;
    skos:note """### type (?x CollectionofEvents) & elementOf (?ev ?x) -> type (?ev Event) """
    .
    
nco:UnifyingFactor a owl:Class ;
    skos:note """[TODO] Future work: associate to rule expression to test on collection items""" 
    .

nco:PredictionEvent rdfs:subCLassOf nco:Event ;
    skos:note """### TODO type (?ev1 PredictionEvent) ® $ ?ev_or_sit hasPrediction (?ev1 ?ev_or_sit) & time:hasTime (?ev1 ?t1) & time:hasTime (?ev_or_sit ?t2) Ù time:intervalBefore (?t1 ?t2) """ .

nco:OmittedEvent rdfs:subClassOf nco:Event .

nco:Situation rdfs:subClassOf nco:Collection ;
    skos:note """### TODO type (?x Situation) & elementOf (?s ?x) -> type (?s Statement) """ .


nco:Claim rdfs:subClassOf nco:Statement ;
    skos:note """### TODO:
### type (?c Claim) -> E ?c hasAgent (?c ?a) 
### type (?c Claim) -> E ?c concernsTopic (?c ?t) 
### type (?c Claim) -> E ?n newsItem (?c ?n) """ .

nco:Viewpoint rdfs:subClassOf nco:Collection ;
    skos:note """### type (?v Viewpoint) & elementOf (?s ?v) 
### -> type (?s Claim)] 
### TODO hasTopic (?ni T(?c)) & type (?c Claim) & elementOf (?c ?v) ->  hasTopic (?ni T(?v)) """ .

### Object properties
nco:subTopicOf rdfs:subPropertyOf skos:narrowerTransitive ;
    a owl:TransitiveProperty ;
    rdfs:domain nco:Topic ;
    rdfs:range nco:Topic ;
    owl:inverseOf nco:superTopicOf ;
    skos:note """[TODO] Align with IPCT as follows: Iptc:topic (?x) and iptc:topic ?y) and Narrower (?x ?y)—> subTopicOf (?x ?y)"""
    .
nco:superTopicOf rdfs:subPropertyOf skos:broaderTransitive .

nco:isTopicRoleOf a owl:FunctionalProperty, owl:InverseFunctionalProperty ;
    rdfs:domain nco:Topic ;
    rdfs:range owl:Thing ;
    owl:inverseOf nco:hasTopicRole ;
    skos:note "A given topic role is played by one and only thing."@en
    .

nco:hasTopic a owl:ObjectProperty ;
    rdfs:domain nco:NewsItem ;
    rdfs:range nco:Topic ;
    owl:hasInverse nco:isTopicOf ;
    skos:note """A news item can have many topics, and topics can be associated to many news items."""@en ;
    skos:note """[TODO] hasTopic(n, t1) -> All skos:narrowerTransitive (t1,t2) -> subTopicOf(t1, t2)"""
    .
nco:isTopicOf owl:isInverseOf nco:hasTopic .

nco:hasAspect rdfs:domain owl:Thing ;
    rdfs:range nco:Topic ;
    skos:note "TODO check domain"@en ;
    skos:note "Topics can have many aspects"@en
    .
nco:isAspectOf owl:inverseOf nco:hasAspect .

nco:regionOf a owl:TransitiveProperty, owl:AsymmetricProperty, owl:IrreflexiveProperty ;
    rdfs:subPropertyOf dul:isProperPartOf ;
    rdfs:domain owl:Thing ;
    rdfs:range owl:Thing ;
    skos:note """[TODO] Decide what to do with spatial relations"""
    .
nco:hasRegion owl:inverseOf nco:regionOf .

nco:hasSubEvent a owl:ObjectProperty, owl:TransitiveProperty ;
    rdfs:domain nco:Event ;
    rdfs:range nco:Event
    .
nco:isSubEventOf owl:inverseOf nco:hasSubEvent .

nco:eventDependsOn a owl:ObjectProperty ;
    rdfs:domain nco:Event ;
    rdfs:range owl:Thing  ;
    skos:note """## TODO: range is events OR situation""" ;
    skos:note """## TODO What is the inverse of eventsDependsOn?"""
    .

nco:causalDependency a owl:ObjectProperty ;
    rdfs:domain owl:Thing ; 
    skos:note """TODO domain is events or situations""" ;
    skos:note """TODO ### What is the inverse of causalDependency?""" ;
    rdfs:range nco:Event
    .

nco:hasUnifyingFactor a owl:ObjectProperty ;
    rdfs:domain nco:Collection ;
    rdfs:range nco:UnifyingFactor ;
    skos:note """
### [Fixed] Question: what distinguishes UF from Topics? They are two different things, UF associate collections and expressions who validates items...
### TODO type (?x Collection) -> Exists ?uf hasUnifyingFactor (?x ?uf) 
### TODO type (?coe CollectionOfEvents) & hasUnifyingFactor (?coe ?uf) & elementOf (?e ?coe) ->  satisfiesUF (?ev ?uf) 
### TODO type (?coe CollectionOfEvents) & hasUnifyingFactor (?coe ?uf) & satisfiesUF (?e ?uf) -> elementOf (?e ?coe) """
    .
nco:isUnifyingFactorOf owl:inverseOf nco:hasUnifyingFactor .

nco:hasElement a owl:ObjectProperty ;
    rdfs:domain nco:Collection ;
    rdfs:range owl:Thing
    .
nco:isElementOf owl:inverseOf nco:hasElement .

nco:hasPrediction a owl:ObjectProperty ;
    rdfs:domain nco:Event ; 
    skos:note """### TODO Why situations cannot predict other situations ??? what distinguishes events from situations???""" ;
    rdfs:range owl:Thing ;
    skos:note """### TODO range is events or situations"""
    .

nco:hasOmittedEvent a owl:ObjectProperty ;
    rdfs:domain nco:Event ;
    rdfs:range nco:OmittedEvent ;
    skos:note """"#### TODO
### I don't undertand this:
#### subclassOf (OmissionEvent Event) 
###
### type (?ev1 OmissionEvent) -> Exists ?ev2 hasOmittedEvent (?ev1 ?ev2)   (Shouldn't it be ?ev2 hasOmittedEvent ?ev1 ?) Isn't ?ev2 a actual happened event?
###""" .

nco:hasAgent a owl:ObjectProperty ;
    rdfs:domain nco:Claim ;
    rdfs:range nco:Agent .

nco:concernsTopic a owl:ObjectProperty ;
    rdfs:domain nco:Claim ;
    rdfs:range nco:Topic .

nco:newsItem a owl:ObjectProperty ;
    rdfs:domain owl:Thing ; 
    skos:note """### TODO check this one?""" ;
    rdfs:range nco:NewsItem .

nco:hasJustification a owl:ObjectProperty ;
    skos:note """### TODO CHECK is this the ontology or the example in 4.5.1???""". 
